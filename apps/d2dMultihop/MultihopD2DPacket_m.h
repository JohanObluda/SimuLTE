//
// Generated file, do not edit! Created by nedtool 5.6 from apps/d2dMultihop/MultihopD2DPacket.msg.
//

#ifndef __MULTIHOPD2DPACKET_M_H
#define __MULTIHOPD2DPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "inet/common/geometry/common/Coord.h"
// }}

/**
 * Class generated from <tt>apps/d2dMultihop/MultihopD2DPacket.msg:23</tt> by nedtool.
 * <pre>
 * //
 * // MultihopD2DPacket
 * //
 * // Extend this packet for creating your own multihop message
 * //
 * packet MultihopD2DPacket
 * {
 *     unsigned int srcId;
 *     uint32_t msgid;          // unique id of the message  < sender id  | local msg id >
 *     unsigned int size;
 * 
 *     inet::Coord srcCoord;
 *     double maxRadius;
 * 
 *     int ttl;                 // time-to-live (to avoid flooding)
 *     unsigned int hops;       // number of hops
 * 
 *     unsigned int lastHopSenderId;
 *     simtime_t timestamp;
 * }
 * </pre>
 */
class MultihopD2DPacket : public ::omnetpp::cPacket
{
  protected:
    unsigned int srcId;
    uint32_t msgid;
    unsigned int size;
    inet::Coord srcCoord;
    double maxRadius;
    int ttl;
    unsigned int hops;
    unsigned int lastHopSenderId;
    ::omnetpp::simtime_t timestamp;

  private:
    void copy(const MultihopD2DPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MultihopD2DPacket&);

  public:
    MultihopD2DPacket(const char *name=nullptr, short kind=0);
    MultihopD2DPacket(const MultihopD2DPacket& other);
    virtual ~MultihopD2DPacket();
    MultihopD2DPacket& operator=(const MultihopD2DPacket& other);
    virtual MultihopD2DPacket *dup() const override {return new MultihopD2DPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getSrcId() const;
    virtual void setSrcId(unsigned int srcId);
    virtual uint32_t getMsgid() const;
    virtual void setMsgid(uint32_t msgid);
    virtual unsigned int getSize() const;
    virtual void setSize(unsigned int size);
    virtual inet::Coord& getSrcCoord();
    virtual const inet::Coord& getSrcCoord() const {return const_cast<MultihopD2DPacket*>(this)->getSrcCoord();}
    virtual void setSrcCoord(const inet::Coord& srcCoord);
    virtual double getMaxRadius() const;
    virtual void setMaxRadius(double maxRadius);
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
    virtual unsigned int getHops() const;
    virtual void setHops(unsigned int hops);
    virtual unsigned int getLastHopSenderId() const;
    virtual void setLastHopSenderId(unsigned int lastHopSenderId);
    virtual ::omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(::omnetpp::simtime_t timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MultihopD2DPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MultihopD2DPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MULTIHOPD2DPACKET_M_H

